name: Build bootc image with artifacts
on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated)'
        required: true
        default: 'linux/amd64,linux/arm64'
      formats:
        description: 'Export formats (comma-separated)'
        required: true
        default: 'anaconda-iso,qcow2'
  push:
    branches:
      - main

jobs:
  # Setup job: Parse build parameters
  setup:
    name: Setup build parameters
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.setup.outputs.platforms }}
      formats: ${{ steps.setup.outputs.formats }}
      matrix: ${{ steps.setup.outputs.matrix }}
    steps:
      - name: Setup build parameters
        id: setup
        run: |
          # Set platforms (from input or default)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLATFORMS="${{ github.event.inputs.platforms }}"
            FORMATS="${{ github.event.inputs.formats }}"
          else
            PLATFORMS="linux/amd64,linux/arm64"
            FORMATS="anaconda-iso,qcow2"
          fi

          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "formats=$FORMATS" >> $GITHUB_OUTPUT
          echo "Building for platforms: $PLATFORMS"
          echo "Building formats: $FORMATS"

          # Create matrix for build jobs
          MATRIX='{"include":['
          IFS=',' read -ra PLATFORM_ARRAY <<< "$PLATFORMS"
          for i in "${!PLATFORM_ARRAY[@]}"; do
            PLATFORM="${PLATFORM_ARRAY[i]}"
            ARCH="${PLATFORM#linux/}"

            if [ "$i" -gt 0 ]; then
              MATRIX="${MATRIX},"
            fi

            if [ "$ARCH" = "arm64" ]; then
              RUNNER="ubuntu-24.04-arm"
            else
              RUNNER="ubuntu-latest"
            fi

            MATRIX="${MATRIX}{\"platform\":\"$PLATFORM\",\"arch\":\"$ARCH\",\"runner\":\"$RUNNER\"}"
          done
          MATRIX="${MATRIX}]}"

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Matrix: $MATRIX"

  # Matrix job: Build the base bootc image for each platform
  build-image:
    name: Build BootC base image
    needs: setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    outputs:
      image: ${{ steps.build.outputs.image }}
      tags: ${{ steps.build.outputs.tags }}
    env:
      # Disable Subscription Manager container passthrough
      SMDEV_CONTAINER_OFF: 1
      # Source registry for base image
      SOURCE_REGISTRY_HOST: "registry.redhat.io"

      # Destination image configuration
      DEST_IMAGE: "${{ vars.DEST_IMAGE || format('{0}/{1}', github.repository_owner, 'bootc-example') }}"
      TAGLIST: "${{ vars.TAGLIST || format('latest {0} {1}', github.sha, github.ref_name) }}"
      DEST_REGISTRY_HOST: "${{ vars.DEST_REGISTRY_HOST || 'ghcr.io' }}"
      DEST_REGISTRY_USER: "${{ vars.DEST_REGISTRY_USER || github.actor }}"
      DEST_REGISTRY_PASSWORD: "${{ secrets.DEST_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}"
    container:
      image: registry.access.redhat.com/ubi9/ubi
      options: --privileged
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get container tools in UBI builder
        run: dnf -y install podman buildah skopeo

      - name: Register with Red Hat subscription manager
        run: |
          if [ -n "${{ secrets.RHT_ORGID }}" ] && [ -n "${{ secrets.RHT_ACT_KEY }}" ]; then
            echo "Registering with organization ID and activation key..."
            subscription-manager register --org=${{ secrets.RHT_ORGID }} --activationkey=${{ secrets.RHT_ACT_KEY }}
          else
            echo "Registering with username and password..."
            subscription-manager register --username=${{ secrets.RH_USERNAME }} --password=${{ secrets.RH_PASSWORD }}
          fi

      # workaround for https://github.com/redhat-actions/podman-login/issues/42
      - name: Workaround open podman-login action issue
        env:
          auth: "{ \"auths\": {} }"
        run: |
          mkdir -p $HOME/.docker
          echo $auth > $HOME/.docker/config.json

      - name: Log in to Red Hat Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.SOURCE_REGISTRY_HOST }}
          username: ${{ secrets.SOURCE_REGISTRY_USER || secrets.RH_USERNAME }}
          password: ${{ secrets.SOURCE_REGISTRY_PASSWORD || secrets.RH_PASSWORD }}
          auth_file_path: /run/containers/0/auth.json

      - name: Build platform-specific image with Buildah
        id: build
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.DEST_IMAGE }}
          tags: |
            latest-${{ matrix.arch }}
            ${{ github.sha }}-${{ matrix.arch }}
          platforms: ${{ matrix.platform }}
          containerfiles: |
            ./Containerfile

      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.DEST_REGISTRY_HOST }}
          username: ${{ env.DEST_REGISTRY_USER }}
          password: ${{ env.DEST_REGISTRY_PASSWORD }}
          auth_file_path: /run/containers/0/auth.json

      - name: Push platform-specific image to GHCR
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ${{ env.DEST_REGISTRY_HOST }}

      - name: Clean up the subscription
        if: always()
        run: subscription-manager unregister

  # Job: Create multi-platform manifest
  create-manifest:
    name: Create multi-platform manifest
    needs: [setup, build-image]
    runs-on: ubuntu-latest
    env:
      DEST_IMAGE: "${{ vars.DEST_IMAGE || format('{0}/{1}', github.repository_owner, 'bootc-example') }}"
      DEST_REGISTRY_HOST: "${{ vars.DEST_REGISTRY_HOST || 'ghcr.io' }}"
      DEST_REGISTRY_USER: "${{ vars.DEST_REGISTRY_USER || github.actor }}"
      DEST_REGISTRY_PASSWORD: "${{ secrets.DEST_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}"
    outputs:
      manifest-latest: ${{ steps.create.outputs.manifest-latest }}
      manifest-sha: ${{ steps.create.outputs.manifest-sha }}
    steps:
      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.DEST_REGISTRY_HOST }}
          username: ${{ env.DEST_REGISTRY_USER }}
          password: ${{ env.DEST_REGISTRY_PASSWORD }}

      - name: Create and push multi-platform manifest
        id: create
        run: |
          set -euo pipefail

          IMAGE_BASE="${{ env.DEST_REGISTRY_HOST }}/${{ env.DEST_IMAGE }}"
          LATEST_MANIFEST="${IMAGE_BASE}:latest"
          SHA_MANIFEST="${IMAGE_BASE}:${{ github.sha }}"

          echo "Creating multi-platform manifests..."
          echo "Latest manifest: $LATEST_MANIFEST"
          echo "SHA manifest: $SHA_MANIFEST"

          # Remove existing manifests if they exist
          podman manifest rm "$LATEST_MANIFEST" 2>/dev/null || true
          podman manifest rm "$SHA_MANIFEST" 2>/dev/null || true

          # Create new manifests
          podman manifest create "$LATEST_MANIFEST"
          podman manifest create "$SHA_MANIFEST"

          # Add platform-specific images to manifests
          IFS=',' read -ra PLATFORM_ARRAY <<< "${{ needs.setup.outputs.platforms }}"
          for PLATFORM in "${PLATFORM_ARRAY[@]}"; do
            ARCH="${PLATFORM#linux/}"
            PLATFORM_LATEST="${IMAGE_BASE}:latest-${ARCH}"
            PLATFORM_SHA="${IMAGE_BASE}:${{ github.sha }}-${ARCH}"

            echo "Processing platform: $PLATFORM (arch: $ARCH)"
            echo "  Adding $PLATFORM_LATEST to latest manifest"
            echo "  Adding $PLATFORM_SHA to SHA manifest"

            # Add to manifests with proper architecture specification
            podman manifest add --arch "$ARCH" --os "linux" "$LATEST_MANIFEST" "docker://$PLATFORM_LATEST"
            podman manifest add --arch "$ARCH" --os "linux" "$SHA_MANIFEST" "docker://$PLATFORM_SHA"
          done

          echo "Inspecting created manifests..."
          podman manifest inspect "$LATEST_MANIFEST"
          podman manifest inspect "$SHA_MANIFEST"

          echo "Pushing multi-platform manifests..."
          podman manifest push --all "$LATEST_MANIFEST" "docker://$LATEST_MANIFEST"
          podman manifest push --all "$SHA_MANIFEST" "docker://$SHA_MANIFEST"

          echo "Multi-platform manifests created and pushed successfully!"
          echo "manifest-latest=$LATEST_MANIFEST" >> $GITHUB_OUTPUT
          echo "manifest-sha=$SHA_MANIFEST" >> $GITHUB_OUTPUT

  # Summary job
  summary:
    name: Build Summary
    needs: [setup, build-image, create-manifest]
    runs-on: ubuntu-latest
    if: always()
    env:
      DEST_IMAGE: "${{ vars.DEST_IMAGE || format('{0}/{1}', github.repository_owner, 'bootc-example') }}"
      DEST_REGISTRY_HOST: "${{ vars.DEST_REGISTRY_HOST || 'ghcr.io' }}"
    steps:
      - name: Print build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Multi-platform Images" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: ${{ needs.create-manifest.outputs.manifest-latest }}" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: ${{ needs.create-manifest.outputs.manifest-sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Platforms: ${{ needs.setup.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platform-specific Images" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra PLATFORM_ARRAY <<< "${{ needs.setup.outputs.platforms }}"
          for PLATFORM in "${PLATFORM_ARRAY[@]}"; do
            ARCH="${PLATFORM#linux/}"
            echo "- $ARCH: ${{ env.DEST_REGISTRY_HOST }}/${{ env.DEST_IMAGE }}:${{ github.sha }}-${ARCH}" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Setup: ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Base Image Build: ${{ needs.build-image.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Manifest Creation: ${{ needs.create-manifest.result }}" >> $GITHUB_STEP_SUMMARY
